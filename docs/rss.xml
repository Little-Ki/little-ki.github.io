<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Little-Ki's blog</title><link>https://little-ki.github.io</link><description>此处空无一物</description><copyright>Little-Ki's blog</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://github.githubassets.com/favicons/favicon.svg</url><title>avatar</title><link>https://little-ki.github.io</link></image><lastBuildDate>Sat, 19 Jul 2025 15:52:56 +0000</lastBuildDate><managingEditor>Little-Ki's blog</managingEditor><ttl>60</ttl><webMaster>Little-Ki's blog</webMaster><item><title>【文档】终极反调试参考</title><link>https://little-ki.github.io/post/%E3%80%90-wen-dang-%E3%80%91-zhong-ji-fan-diao-shi-can-kao.html</link><description>原文：The Ultimate Anti-Debugging Reference

# 1. Process Environment Block (PEB) 结构检测
[PEB](https://zh.wikipedia.org/wiki/%E8%BF%9B%E7%A8%8B%E7%8E%AF%E5%A2%83%E5%9D%97)：进程环境块，保存了关于进程的环境信息，其结构[在此](https://learn.microsoft.com/zh-cn/windows/win32/api/winternl/ns-winternl-peb)可查看。</description><guid isPermaLink="true">https://little-ki.github.io/post/%E3%80%90-wen-dang-%E3%80%91-zhong-ji-fan-diao-shi-can-kao.html</guid><pubDate>Mon, 14 Jul 2025 16:05:22 +0000</pubDate></item><item><title>【算法】流体（沙子）模拟器</title><link>https://little-ki.github.io/post/%E3%80%90-suan-fa-%E3%80%91-liu-ti-%EF%BC%88-sha-zi-%EF%BC%89-mo-ni-qi.html</link><description># 简述
这是一种模拟粒子移动以及粒子交互的方式，在游戏 Noita 中使用了此方式来模拟沙子及其它粒子，在[这儿](https://sandboxels.r74n.com/)可以找到在线示例。</description><guid isPermaLink="true">https://little-ki.github.io/post/%E3%80%90-suan-fa-%E3%80%91-liu-ti-%EF%BC%88-sha-zi-%EF%BC%89-mo-ni-qi.html</guid><pubDate>Tue, 03 Jun 2025 07:11:17 +0000</pubDate></item><item><title>【内核】ObRegisterCallbacks 绕过</title><link>https://little-ki.github.io/post/%E3%80%90-nei-he-%E3%80%91ObRegisterCallbacks%20-rao-guo.html</link><description># 简介
[`ObRegisterCallbacks`](https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/nf-wdm-obregistercallbacks)是一个内核函数，用于创建回调来处理对线程、进程以及桌面句柄的操作。</description><guid isPermaLink="true">https://little-ki.github.io/post/%E3%80%90-nei-he-%E3%80%91ObRegisterCallbacks%20-rao-guo.html</guid><pubDate>Sat, 10 May 2025 08:49:21 +0000</pubDate></item><item><title>【内核】禁用进程、线程、模块通知回调</title><link>https://little-ki.github.io/post/%E3%80%90-nei-he-%E3%80%91-jin-yong-jin-cheng-%E3%80%81-xian-cheng-%E3%80%81-mo-kuai-tong-zhi-hui-diao.html</link><description>[原文](https://www.unknowncheats.me/forum/1869089-post1.html)

# 背景
一些游戏反作弊系统使用了[`PsSetCreateThreadNotifyRoutine`](https://msdn.microsoft.com/en-us/library/windows/hardware/ff559954(v=vs.85).aspx)来阻止作弊软件在Ring3层下从游戏进程创建新线程。</description><guid isPermaLink="true">https://little-ki.github.io/post/%E3%80%90-nei-he-%E3%80%91-jin-yong-jin-cheng-%E3%80%81-xian-cheng-%E3%80%81-mo-kuai-tong-zhi-hui-diao.html</guid><pubDate>Sat, 10 May 2025 08:10:18 +0000</pubDate></item><item><title>【翻译】用SDL2播放一个音符</title><link>https://little-ki.github.io/post/%E3%80%90-fan-yi-%E3%80%91-yong-SDL2-bo-fang-yi-ge-yin-fu.html</link><description>[原文](https://blog.fredrb.com/2023/08/08/audio-programming-note-sdl/)

# 频率、振幅和采样率
在使用C代码前先看一些基础信息。</description><guid isPermaLink="true">https://little-ki.github.io/post/%E3%80%90-fan-yi-%E3%80%91-yong-SDL2-bo-fang-yi-ge-yin-fu.html</guid><pubDate>Wed, 30 Apr 2025 09:30:46 +0000</pubDate></item><item><title>【编码】Lempel-Ziv 分解：无滑动窗LZ77</title><link>https://little-ki.github.io/post/%E3%80%90-bian-ma-%E3%80%91Lempel-Ziv%20-fen-jie-%EF%BC%9A-wu-hua-dong-chuang-LZ77.html</link><description>原文：[ScriptLZ](https://www.uni-ulm.de/fileadmin/website_uni_ulm/iui.inst.190/Lehre/SS14/Datenkompression/ScriptLZ.pdf)

# 1、后缀数组
&amp;emsp;&amp;emsp;对于字符串 $`S`$，它的后缀数组是其所有后缀按字典序排序的数组（也称为字母顺序，字典或词汇顺序），此排序方式由字符集 $`\Sigma`$ 决定的。</description><guid isPermaLink="true">https://little-ki.github.io/post/%E3%80%90-bian-ma-%E3%80%91Lempel-Ziv%20-fen-jie-%EF%BC%9A-wu-hua-dong-chuang-LZ77.html</guid><pubDate>Tue, 11 Mar 2025 08:52:27 +0000</pubDate></item><item><title>【编码】LZ77</title><link>https://little-ki.github.io/post/%E3%80%90-bian-ma-%E3%80%91LZ77.html</link><description># 简述
&amp;emsp;&amp;emsp;LZ77是以色列计算机科学家Abraham Lempel与 Jacob 在1977 年发表之论文中的无损数据压缩算法。</description><guid isPermaLink="true">https://little-ki.github.io/post/%E3%80%90-bian-ma-%E3%80%91LZ77.html</guid><pubDate>Tue, 11 Mar 2025 08:11:10 +0000</pubDate></item><item><title>【OpenGL】着色器及数据</title><link>https://little-ki.github.io/post/%E3%80%90OpenGL%E3%80%91-zhao-se-qi-ji-shu-ju.html</link><description># 术语：&#13;
&gt; 顶点数组对象：Vertex Array Object，VAO，保存了多个顶点数组对象，用于在多个顶点数组间切换.&#13;
&gt; 顶点缓冲对象：Vertex Buffer Object，VBO，储存了单个顶点数组。</description><guid isPermaLink="true">https://little-ki.github.io/post/%E3%80%90OpenGL%E3%80%91-zhao-se-qi-ji-shu-ju.html</guid><pubDate>Fri, 03 Jan 2025 07:54:44 +0000</pubDate></item><item><title>【OpenGL】纹理</title><link>https://little-ki.github.io/post/%E3%80%90OpenGL%E3%80%91-wen-li.html</link><description>&gt; 纹理可以是1D / 2D / 3D 以及立方体贴图，用来添加物体的细节。</description><guid isPermaLink="true">https://little-ki.github.io/post/%E3%80%90OpenGL%E3%80%91-wen-li.html</guid><pubDate>Fri, 03 Jan 2025 07:29:31 +0000</pubDate></item><item><title>【OpenGL】GLSL</title><link>https://little-ki.github.io/post/%E3%80%90OpenGL%E3%80%91GLSL.html</link><description># 简介&#13;
&amp;emsp;&amp;emsp;GLSL（OpenGL Shading Language） 全称 OpenGL 着色语言，是用来在 OpenGL 中着色编程的语言，也即开发人员写的短小的自定义程序，他们是在图形卡的 GPU上执行的，代替了固定的渲染管线的一部分，使渲染管线中不同层次具有可编程性。</description><guid isPermaLink="true">https://little-ki.github.io/post/%E3%80%90OpenGL%E3%80%91GLSL.html</guid><pubDate>Fri, 03 Jan 2025 05:49:05 +0000</pubDate></item><item><title>【算法】光栅化</title><link>https://little-ki.github.io/post/%E3%80%90-suan-fa-%E3%80%91-guang-zha-hua.html</link><description>参考：[Rasterization](https://www.scratchapixel.com/lessons/3d-basic-rendering/rasterization-practical-implementation/overview-rasterization-algorithm.html)

# 简述 
&amp;emsp;&amp;emsp;光栅化是将 3D 空间三角形投影至 2D 屏幕空间的过程。</description><guid isPermaLink="true">https://little-ki.github.io/post/%E3%80%90-suan-fa-%E3%80%91-guang-zha-hua.html</guid><pubDate>Thu, 02 Jan 2025 07:23:01 +0000</pubDate></item></channel></rss>